CREATE OR REPLACE FUNCTION RETORNA_TOTAL(usuario int)
    RETURNS NUMERIC(12,2) AS $RETORNA_TOTAL$
declare
    retorno NUMERIC(12,2);
BEGIN
    SELECT TOTAL INTO retorno FROM TOTAL_JOGADOR WHERE ID_USUARIO = usuario;
    RETURN retorno;
END;
$RETORNA_TOTAL$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION TOTALIZAR()
RETURNS TRIGGER AS $TOTALIZAR$
BEGIN
    INSERT INTO TOTAL_JOGADOR (ID_USUARIO, TOTAL) VALUES (NEW.ID_USUARIO, (SELECT PRECO FROM JOGOS WHERE ID_JOGO = NEW.ID_JOGO))
    ON CONFLICT (ID_USUARIO) DO UPDATE SET TOTAL = TOTAL_JOGADOR.TOTAL + (SELECT PRECO FROM JOGOS WHERE ID_JOGO = NEW.ID_JOGO);
    RETURN NEW;
END;
$TOTALIZAR$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION REMOVER_VENDA()
    RETURNS TRIGGER AS $REMOVER_VENDA$
BEGIN
    IF (SELECT (TOTAL - (SELECT PRECO FROM JOGOS WHERE ID_JOGO = OLD.ID_JOGO)) FROM TOTAL_JOGADOR WHERE ID_USUARIO = OLD.ID_USUARIO) < 1.0 THEN
        RAISE EXCEPTION 'Não pode ficar sem vendas';
    END IF;
    UPDATE TOTAL_JOGADOR SET TOTAL = TOTAL - (SELECT PRECO FROM JOGOS WHERE ID_JOGO = OLD.ID_JOGO) WHERE ID_USUARIO = OLD.ID_USUARIO;
    RETURN OLD;
END;
$REMOVER_VENDA$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGGER_TOTALIZA
    AFTER INSERT ON jogos_usuarios
    FOR EACH ROW EXECUTE FUNCTION TOTALIZAR();

CREATE OR REPLACE TRIGGER TRIGGER_REMOVER
    BEFORE DELETE ON jogos_usuarios
    FOR EACH ROW EXECUTE FUNCTION REMOVER_VENDA();


CREATE OR REPLACE PROCEDURE CONSOLIDA(usuario int)
    LANGUAGE plpgsql AS $CONSOLIDA$
declare
    teste NUMERIC(12,2);
BEGIN
    -- Código da procedure
END;
$CONSOLIDA$ LANGUAGE plpgsql;